# GitHub Actions workflow for building, pushing Docker image, and deploying to Kubernetes with secret automation
name: Deployment

on:
  push:
    branches:
      - main  # Trigger on push to the main branch, adjust as needed
  workflow_dispatch:  # Allow manual triggering of workflow

jobs:
  build-and-transfer:
    name: Build and Transfer Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.image_tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Builds
        uses: docker/setup-buildx-action@v3

      - name: Generate image tag
        id: image_tag
        run: |
          echo "tag=$(echo ${{ github.sha }} | head -c7)" >> $GITHUB_OUTPUT

      - name: Build Docker image locally
        run: |
          # Build the docker image locally
          docker build -t feeti-auth-service:${{ steps.image_tag.outputs.tag }} .
          docker tag feeti-auth-service:${{ steps.image_tag.outputs.tag }} feeti-auth-service:latest
          
          # Save image to a tarball
          mkdir -p ./docker-images
          docker save feeti-auth-service:${{ steps.image_tag.outputs.tag }} | gzip > ./docker-images/feeti-auth-service-${{ steps.image_tag.outputs.tag }}.tar.gz

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Transfer Docker image to VPS
        run: |
          # Transfer the image file to VPS
          scp -o StrictHostKeyChecking=no ./docker-images/feeti-auth-service-${{ steps.image_tag.outputs.tag }}.tar.gz ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/

      - name: Load Docker image on VPS
        run: |
          # Connect to VPS and load the image
          ssh -p 22 ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            # Load the Docker image
            docker load < /tmp/feeti-auth-service-${{ steps.image_tag.outputs.tag }}.tar.gz
            
            # Tag the image for local use
            docker tag feeti-auth-service:${{ steps.image_tag.outputs.tag }} feeti-auth-service:latest

          "

  deploy:
    name: Deploy to Kubernetes
    needs: build-and-transfer
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ needs.build-and-transfer.outputs.image_tag }}
      IMAGE_PATH: feeti-auth-service:${{ needs.build-and-transfer.outputs.image_tag }}
    steps:
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'  # Use a compatible version with your cluster

      - name: Configure Kubernetes cluster
        id: kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          kubectl cluster-info || { echo "Failed to connect to cluster"; exit 1; }

      - name: Generate Kubernetes manifests
        run: |
          # Create manifests directory
          mkdir -p ./k8s
          
          # Generate namespace.yaml
          cat <<EOF > ./k8s/namespace.yaml
          apiVersion: v1
          kind: Namespace
          metadata:
            name: feeti-auth
          EOF
          
          # Generate configmap.yaml
          cat <<EOF > ./k8s/configmap.yaml
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: auth-config
            namespace: feeti-auth
          data:
            NODE_ENV: "production"
            SERVICE_NAME: "auth-service"
            PORT: "3000"
            LOG_LEVEL: "info"
          EOF
          
          # Generate network-policy.yaml
          cat <<EOF > ./k8s/network-policy.yaml
          apiVersion: networking.k8s.io/v1
          kind: NetworkPolicy
          metadata:
            name: auth-network-policy
            namespace: feeti-auth
          spec:
            podSelector:
              matchLabels:
                app: auth-service
            policyTypes:
            - Ingress
            - Egress
            ingress:
            - from:
              - namespaceSelector:
                  matchLabels:
                    name: ingress-nginx
              ports:
              - protocol: TCP
                port: 3000
            egress:
            - to:
              - ipBlock:
                  cidr: 0.0.0.0/0
                  except:
                  - 169.254.0.0/16
                  - 172.16.0.0/12
                  - 192.168.0.0/16
              ports:
              - protocol: TCP
                port: 5432  # PostgreSQL
              - protocol: TCP
                port: 4222  # NATS
          EOF
          
          # Generate auth-service.yaml
          cat <<EOF > ./k8s/auth-service.yaml
          apiVersion: v1
          kind: Service
          metadata:
            name: auth-service
            namespace: feeti-auth
          spec:
            selector:
              app: auth-service
            ports:
            - port: 3000
              targetPort: 3000
            type: ClusterIP
          EOF
          
          # Generate auth-deployment.yaml - using locally available image
          cat <<EOF > ./k8s/auth-deployment.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: auth-service
            namespace: feeti-auth
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: auth-service
            template:
              metadata:
                labels:
                  app: auth-service
              spec:
                containers:
                - name: auth-service
                  image: ${IMAGE_PATH}
                  imagePullPolicy: IfNotPresent
                  ports:
                  - containerPort: 3000
                  resources:
                    limits:
                      cpu: "0.5"
                      memory: "512Mi"
                    requests:
                      cpu: "0.2"
                      memory: "256Mi"
                  env:
                  - name: PORT
                    valueFrom:
                      configMapKeyRef:
                        name: auth-config
                        key: PORT
                  - name: NODE_ENV
                    valueFrom:
                      configMapKeyRef:
                        name: auth-config
                        key: NODE_ENV
                  - name: SERVICE_NAME
                    valueFrom:
                      configMapKeyRef:
                        name: auth-config
                        key: SERVICE_NAME
                  - name: JWT_KEY
                    valueFrom:
                      secretKeyRef:
                        name: auth-secrets
                        key: JWT_KEY
                  - name: NATS_URL
                    valueFrom:
                      secretKeyRef:
                        name: auth-secrets
                        key: NATS_URL
                  - name: GIN_MODE
                    valueFrom:
                      secretKeyRef:
                        name: auth-secrets
                        key: GIN_MODE
                  - name: DATABASE_URL
                    valueFrom:
                      secretKeyRef:
                        name: auth-secrets
                        key: DATABASE_URL
                  - name: TWILIO_ACCOUNT_SID
                    valueFrom:
                      secretKeyRef:
                        name: auth-secrets
                        key: TWILIO_ACCOUNT_SID
                  - name: TWILIO_AUTH_TOKEN
                    valueFrom:
                      secretKeyRef:
                        name: auth-secrets
                        key: TWILIO_AUTH_TOKEN
                  - name: NEW_RELIC_LICENSE_KEY
                    valueFrom:
                      secretKeyRef:
                        name: auth-secrets
                        key: NEW_RELIC_LICENSE_KEY
                  livenessProbe:
                    httpGet:
                      path: /api/v1/healthz
                      port: 3000
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  readinessProbe:
                    httpGet:
                      path: /api/v1/healthz
                      port: 3000
                    initialDelaySeconds: 5
                    periodSeconds: 5
          EOF
          
          # Generate auth-ingress.yaml
          cat <<EOF > ./k8s/auth-ingress.yaml
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: auth-ingress
            namespace: feeti-auth
            annotations:
              kubernetes.io/ingress.class: nginx
              nginx.ingress.kubernetes.io/ssl-redirect: "true"
              cert-manager.io/cluster-issuer: letsencrypt-prod
          spec:
            tls:
            - hosts:
              - auth.feeti.app
              secretName: auth-tls
            rules:
            - host: auth.feeti.app
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: auth-service
                      port:
                        number: 3000
          EOF
          
          # Generate auth-hpa.yaml
          cat <<EOF > ./k8s/auth-hpa.yaml
          apiVersion: autoscaling/v2
          kind: HorizontalPodAutoscaler
          metadata:
            name: auth-hpa
            namespace: feeti-auth
          spec:
            scaleTargetRef:
              apiVersion: apps/v1
              kind: Deployment
              name: auth-service
            minReplicas: 2
            maxReplicas: 5
            metrics:
            - type: Resource
              resource:
                name: cpu
                target:
                  type: Utilization
                  averageUtilization: 70
            - type: Resource
              resource:
                name: memory
                target:
                  type: Utilization
                  averageUtilization: 80
          EOF
          
          # Generate health-check.yaml
          cat <<EOF > ./k8s/health-check.yaml
          apiVersion: batch/v1
          kind: CronJob
          metadata:
            name: auth-health-check
            namespace: feeti-auth
          spec:
            schedule: "*/15 * * * *"
            successfulJobsHistoryLimit: 1
            failedJobsHistoryLimit: 3
            jobTemplate:
              spec:
                template:
                  spec:
                    containers:
                    - name: health-check
                      image: curlimages/curl:7.83.1
                      command:
                      - /bin/sh
                      - -c
                      - |
                        if curl -s -o /dev/null -w "%{http_code}" http://auth-service:3000/api/v1/healthz | grep -q 200; then
                          echo "Health check passed"
                          exit 0
                        else
                          echo "Health check failed"
                          exit 1
                        fi
                    restartPolicy: OnFailure
          EOF

      - name: Run deployment on VPS via SSH
        run: |
          # Connect to VPS and apply Kubernetes manifests
          ssh -p 22 ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            # Create a temporary directory
            mkdir -p /tmp/k8s-deploy-${{ github.run_id }}
          "
          
          # Copy the K8s manifests to VPS
          scp -P 22 -r ./k8s/* ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/k8s-deploy-${{ github.run_id }}/
          
          # Apply the manifests on the VPS
          ssh -p 22 ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            cd /tmp/k8s-deploy-${{ github.run_id }}
            
            # Create namespace if it doesn't exist
            kubectl get namespace feeti-auth || kubectl apply -f namespace.yaml
            kubectl config set-context --current --namespace=feeti-auth
            
            # Apply ConfigMap
            kubectl apply -f configmap.yaml
            
            # Create or update Kubernetes secrets
            kubectl create secret generic auth-secrets \
              --namespace=feeti-auth \
              --from-literal=JWT_KEY='${{ secrets.JWT_KEY }}' \
              --from-literal=TWILIO_ACCOUNT_SID='${{ secrets.TWILIO_ACCOUNT_SID }}' \
              --from-literal=TWILIO_AUTH_TOKEN='${{ secrets.TWILIO_AUTH_TOKEN }}' \
              --from-literal=NEW_RELIC_LICENSE_KEY='${{ secrets.NEW_RELIC_LICENSE_KEY }}' \
              --from-literal=DATABASE_URL='${{ secrets.DATABASE_URL }}' \
              --from-literal=NATS_URL='${{ secrets.NATS_URL }}' \
              --from-literal=GIN_MODE='${{ secrets.GIN_MODE }}' \
              --from-literal=PORT='${{ secrets.PORT }}' \
              --dry-run=client -o yaml | kubectl apply -f -
            
            # Apply Kubernetes manifests in order
            kubectl apply -f network-policy.yaml
            kubectl apply -f auth-service.yaml
            kubectl apply -f auth-deployment.yaml
            kubectl apply -f auth-ingress.yaml
            kubectl apply -f auth-hpa.yaml
            kubectl apply -f health-check.yaml
            
            # Wait for deployment to complete
            echo 'Waiting for deployment to complete...'
            kubectl rollout status deployment/auth-service --timeout=300s
            
            # Check if pods are running
            PODS_RUNNING=\$(kubectl get pods -l app=auth-service -o jsonpath='{.items[*].status.phase}' | grep -c 'Running')
            if [ \"\$PODS_RUNNING\" -lt 1 ]; then
              echo 'Error: No pods are running for auth-service'
              kubectl get pods -l app=auth-service
              kubectl describe pods -l app=auth-service
              exit 1
            fi
            
            echo \"Deployment successfully completed with \$PODS_RUNNING pods running\"
            
            # Check service endpoints
            echo 'Verifying service endpoints...'
            kubectl get endpoints auth-service
            
            # Clean up temporary files
            cd / && rm -rf /tmp/k8s-deploy-${{ github.run_id }}
          "

  notify:
    name: Send Notification
    needs: [build-and-transfer, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment result
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "✅ Deployment successful - New version of feeti-auth-service is live"
            # You could add actual notification code here (Slack, Email, etc.)
          else
            echo "❌ Deployment failed - Check workflow logs for details"
            # You could add actual notification code here (Slack, Email, etc.)
          fi
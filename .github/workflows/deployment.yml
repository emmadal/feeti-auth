name: Deployment
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Build Docker image
        run: |
          docker buildx build \
            --build-arg PORT="${{ secrets.PORT }}" \
            --build-arg SMS_JWT="${{ secrets.SMS_JWT }}" \
            --build-arg REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}" \
            --build-arg REDIS_HOST="${{ secrets.REDIS_HOST }}" \
            --build-arg REDIS_USERNAME="${{ secrets.REDIS_USERNAME }}" \
            --build-arg JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            --build-arg SMS_API_URL="${{ secrets.SMS_API_URL }}" \
            --build-arg DB_HOST="${{ secrets.DB_HOST }}" \
            --build-arg DB_USER="${{ secrets.DB_USER }}" \
            --build-arg DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            --build-arg DB_NAME="${{ secrets.DB_NAME }}" \
            --build-arg DB_PORT="${{ secrets.DB_PORT }}" \
            --build-arg NEW_RELIC_LICENSE_KEY="${{ secrets.NEW_RELIC_LICENSE_KEY }}" \
            --build-arg GIN_MODE="${{ secrets.GIN_MODE }}" \
            -t backend-user:${{ github.run_number }} .

      - name: Verify Docker Image Exists
        run: docker images | grep backend-user

      - name: Save Image as tar
        run: docker save -o backend-user-${{ github.run_number }}.tar backend-user:${{ github.run_number }}

      - name: Transfer image to VPS
        run: scp -o StrictHostKeyChecking=no backend-user-${{ github.run_number }}.tar ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/var/backend-user/

      - name: Deploy image to VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd /var/backend-user
            docker service rm backend || true
            TAG=${{ github.run_number }} docker stack deploy --compose-file docker-compose.yml backend-user
          EOF

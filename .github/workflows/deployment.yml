name: Deployment
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Retrieve Latest Docker Tag and Increment
        id: get_tag
        run: |
          latest_tag=$(curl -s https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/backend-user/tags | jq -r '.results[0].name')
          new_tag=$((latest_tag + 1))
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Build and Push Docker image
        run: |
          docker buildx build \
            --build-arg PORT="${{ secrets.PORT }}" \
            --build-arg SMS_JWT="${{ secrets.SMS_JWT }}" \
            --build-arg SMS_API_URL="${{ secrets.SMS_API_URL }}" \
            --build-arg DB_HOST="${{ secrets.DB_HOST }}" \
            --build-arg DB_USER="${{ secrets.DB_USER }}" \
            --build-arg DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            --build-arg DB_NAME="${{ secrets.DB_NAME }}" \
            --build-arg DB_PORT="${{ secrets.DB_PORT }}" \
            --build-arg GIN_MODE="release" \
            -t ${{ secrets.DOCKER_USERNAME }}/backend-user:${{ env.new_tag }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/backend-user:${{ env.new_tag }}
  

      - name: Deploy to VPS
        env:
          PORT: ${{ secrets.PORT }}
          SMS_JWT: ${{ secrets.SMS_JWT }}
          SMS_API_URL: ${{ secrets.SMS_API_URL }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT: ${{ secrets.DB_PORT }}
          GIN_MODE: "release"
          new_tag: ${{ env.new_tag }}
          TAG: ${{ env.new_tag }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd /var/backend-user
            docker service rm backend || true
            TAG=${{ env.new_tag }} docker stack deploy --compose-file docker-compose.yml backend-user
          EOF
